print('{:*^30s}'.format('Задание-1:'))
# Реализуйте описаную ниже задачу, используя парадигмы ООП:
# В школе есть Классы(5А, 7Б и т.д.), в которых учатся Ученики.
# У каждого ученика есть два Родителя(мама и папа).
# Также в школе преподают Учителя. Один учитель может преподавать
# в неограниченном кол-ве классов свой определенный предмет.
# Т.е. Учитель Иванов может преподавать математику у 5А и 6Б,
# но больше математику не может преподавать никто другой.

# Выбранная и заполненная данными структура должна решать следующие задачи:
# 1. Получить полный список всех классов школы
# 2. Получить список всех учеников в указанном классе
#  (каждый ученик отображается в формате "Фамилия И.О.")
# 3. Получить список всех предметов указанного ученика
#  (Ученик --> Класс --> Учителя --> Предметы)
# 4. Узнать ФИО родителей указанного ученика
# 5. Получить список всех Учителей, преподающих в указанном классе
import random

familyname = '''Смирнов, Иванов, Кузнецов, Соколов, Попов, Лебедев, Козлов, Новиков, Морозов, Петров, Волков, 
Соловьёв, Васильев, Зайцев, Павлов, Семёнов, Голубев, Виноградов, Богданов, Воробьёв, Фёдоров, Михайлов, 
Беляев, Тарасов, Белов, Комаров, Орлов, Киселёв, Макаров,Андреев, Ковалёв, Ильин, Гусев, Титов, Кузьмин, 
Кудрявцев, Баранов, Куликов, Алексеев, Степанов, Яковлев, Сорокин, Сергеев, Романов, Захаров, Борисов, 
Королёв, Герасимов, Пономарёв, Григорьев, Лазарев, Медведев, Ершов, Никитин, Соболев, Рябов, Поляков, 
Цветков, Данилов, Жуков, Фролов, Журавлёв, Николаев, Крылов, Максимов, Сидоров, Осипов, Белоусов, Федотов, 
Дорофеев, Егоров, Матвеев, Бобров, Дмитриев, Калинин, Анисимов, Петухов, Антонов, Тимофеев, Никифоров, 
Веселов, Филиппов, Марков, Большаков, Суханов, Миронов, Ширяев, Александров, Коновалов, Шестаков, Казаков, 
Ефимов, Денисов, Громов, Фомин, Давыдов, Мельников, Щербаков, Блинов, Колесников,Карпов, Афанасьев, Власов, 
Маслов, Исаков, Тихонов, Аксёнов, Гаврилов, Родионов, Котов, Горбунов, Кудряшов, Быков, Зуев,Третьяков, 
Савельев, Панов, Рыбаков, Суворов, Абрамов, Воронов, Мухин, Архипов, Трофимов, Мартынов, Емельянов, Горшков, 
Чернов, Овчинников, Селезнёв, Панфилов, Копылов, Михеев, Галкин, Назаров, Лобанов, Лукин, Беляков, Потапов, 
Некрасов, Хохлов, Жданов, Наумов, Шилов, Воронцов, Ермаков, Дроздов, Игнатьев, Савин, Логинов, Сафонов, 
Капустин, Кириллов, Моисеев, Елисеев, Кошелев, Костин, Горбачёв, Орехов, Ефремов, Исаев, Евдокимов, 
Калашников, Кабанов, Носков, Юдин, Кулагин, Лапин, Прохоров, Нестеров, Харитонов, Агафонов, Муравьёв, 
Ларионов, Федосеев, Зимин, Пахомов, Шубин, Игнатов, Филатов, Крюков, Рогов, Кулаков, Терентьев, Молчанов, 
Владимиров, Артемьев, Гурьев, Зиновьев, Гришин, Кононов, Дементьев, Ситников, Симонов, Мишин, Фадеев, 
Комиссаров, Мамонтов, Носов, Гуляев, Шаров, Устинов, Вишняков, Евсеев, Лаврентьев, Брагин, Константинов, 
Корнилов, Авдеев, Зыков, Бирюков, Шарапов, Никонов, Щукин, Дьячков, Одинцов, Сазонов, Якушев, Красильников, 
Гордеев, Самойлов, Князев, Беспалов, Уваров, Шашков, Бобылёв, Доронин, Белозёров, Рожков, Самсонов, Мясников, 
Лихачёв, Буров, Сысоев, Фомичёв, Русаков, Стрелков, Гущин, Тетерин, Колобов, Субботин, Фокин, Блохин, 
Селиверстов, Пестов, Кондратьев, Силин, Меркушев, Лыткин, Туров'''
subject = '''Чистописание, Чтение, Труд, Природоведение, Математика, Музыка, Изобразительное искусство, 
Русский язык, Физкультура, Родной язык, Основы религиозных культур и светской этики, Иностранный язык, 
Граждановедение, Краеведение, История, Литература, Основы безопасности жизнедеятельности, Технология, 
География, Биология, Информатика, Обществознание, Черчение, Алгебра, Геометрия, Физика, Химия, 
Естествознание, Основы экономики, Правоведение, Философия, Экология, Астрономия, Начальная военная подготовка, 
Мировая художественная культура, Риторика'''

class Student:
    def __init__(self, familyname_student, n_m_student, clas_room):
        self.familyname_student = familyname_student
        self.n_m_student = n_m_student
        self.clas_room = clas_room
    def student_full_name(self):
        return (self.familyname_student + ' ' + self.n_m_student)

class Parents(Student):
    def __init__(self, familyname_student, n_m_student, familyname_dad, n_m_dad, familyname_mom, n_m_mom):
        self.familyname_student = familyname_student
        self.n_m_student = n_m_student
        self.familyname_dad = familyname_dad
        self.n_m_dad = n_m_dad
        self.familyname_mom = familyname_mom
        self.n_m_mom = n_m_mom
    def student_full_name(self):
        return (self.familyname_student + ' ' + self.n_m_student)
    def dad_full_name(self):
        return (self.familyname_dad + ' ' + self.n_m_dad)
    def mom_full_name(self):
        return (self.familyname_mom + ' ' + self.n_m_mom)

class Teacher(Student):
    def __init__(self, familyname_teacher, n_m_teacher, clas_room, subjects,):
        self.familyname_teacher = familyname_teacher
        self.n_m_teacher = n_m_teacher
        self.clas_room = clas_room
        self.subjects = subjects
    def teacher_full_name(self):
        return (self.familyname_teacher + ' ' + self.n_m_teacher)

students = [Student('Смирнов', 'В.М.', '4-A'),
            Student('Иванов', 'K.C.', '5-A'),
            Student('Петров', 'Л.Г.', '6-A'),
            Student('Симочкин', 'Д.А.', '7-Б'),
            Student('Пушкин', 'З.К.', '8-Б'),
            Student('Крылов', 'Л.Р.', '9-Б'),
            Student('Некрасов', 'Д.М.', '9-Б')
            ]

#1.Полный список всех классов:
clas_rooms = []
for num, student in enumerate(students, start=1):
    [clas_rooms.append(student.clas_room)]
    clas_rooms.sort()
for i in range(len(clas_rooms)):
    if i < len(clas_rooms) and clas_rooms[i] == clas_rooms[i + 1]:
        del clas_rooms[i + 1]
print(clas_rooms)

print('#2: список всех учеников в указанном классе')
#  (каждый ученик отображается в формате "Фамилия И.О.")

for i in range(len(clas_rooms)):
    full_clas = []
    for num, student in enumerate(students, start=1):
        if clas_rooms[i] == student.clas_room:
            [full_clas.append(student.student_full_name())]
    print(clas_rooms[i], ' - ', full_clas)

# 3. Получить список всех предметов указанного ученика
print('#3:Ученик --> Класс --> Учителя --> Предметы')

teachers = [Teacher('Котова', 'А.Г.', '4-A', 'Краеведение, Природоведение, Обществознание'),
            Teacher('Николаева', 'E.C.', '9-Б', 'Алгебра, Геометрия, Черчение'),
            Teacher('Шарапов', 'Д.В.', '5-A', 'Русский язык, Литература, Философия'),
            Teacher('Калинина', 'Л.У.', '8-Б', 'Физика, Химия, Астрономия'),
            Teacher('Большаков', 'З.П.', '7-Б', 'Физкультура, Труд, НВП'),
            Teacher('Устинов', 'П.P.', '7-Б', 'Основы религиозных культур и светской этики, Иностранный язык, Граждановедение'),
            Teacher('Кулагина', 'М.О.', '6-A', 'Пение, Рисование, ОБЖ')
            ]

for num, student in enumerate(students, start=1):
    for i, teacher in enumerate(teachers, start=1):
        print('{} --> {} --> {} --> {}'.format(student.student_full_name(), student.clas_room, teacher.teacher_full_name(), teacher.subjects))

print('#4: Ученик и ФИО родителей')
parents = [Parents('Смирнов', 'В.М.', 'Смирнов', 'M.Ф.', 'Смирнова', 'У.К.'),
            Parents('Иванов', 'K.C.', 'Иванов', 'С.В.', 'Иванова', 'В.А.'),
            Parents('Петров', 'Л.Г.', 'Петров', 'Г.Л.', 'Петрова', 'Ф.А.'),
            Parents('Симочкин', 'Д.А.', 'Симочкин', 'А.У.', 'Симочкина', 'Л.О.'),
            Parents('Пушкин', 'З.К.', 'Пушкин', 'К.Л.', 'Пушкина', 'М.И.'),
            Parents('Крылов', 'Л.Р.', 'Крылов', 'Р.С.', 'Крылова', 'Т.Я.'),
           Parents('Некрасов', 'Д.М.', 'Некрасов', 'М.К.', 'Некрасова', 'О.С.')
            ]

for num, parent in enumerate(parents, start=1):
    print('Ученик: {}, Отец: {}, Мать: {}'.format(parent.student_full_name(), parent.dad_full_name(), parent.mom_full_name()))

print('#5: Cписок всех Учителей, преподающих в указанном классе')

for i in range(len(clas_rooms)):
    full_clas = []
    for num, teacher in enumerate(teachers, start=1):
        if clas_rooms[i] == teacher.clas_room:
            [full_clas.append(teacher.teacher_full_name())]
    print(clas_rooms[i], ' - ', full_clas)

